plugins {
    id "io.freefair.lombok" version "5.2.1" apply false
    id 'org.jetbrains.kotlin.jvm' version '1.6.10' apply false
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'kotlin'

    apply plugin: 'io.freefair.lombok'

    sourceCompatibility = 11

    repositories {
        mavenCentral()
    }

    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
        testImplementation 'org.hamcrest:hamcrest-library:1.3'
    }

    test {
        useJUnitPlatform {
            includeEngines 'junit-jupiter'
            testLogging {
                events("passed", "skipped", "failed")
            }
        }

        // show standard out and standard error of the test JVM(s) on the console
        // testLogging.showStandardStreams = true
    }

    task sourceJar(type: Jar) {
        classifier "sources"
        from sourceSets.main.allJava
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier "javadoc"
        from javadoc.destinationDir
    }

    artifacts {
        archives jar
        archives sourceJar
        archives javadocJar
    }

    signing {
        sign configurations.archives
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                customizePom(pom)
                groupId 'io.github.pellse'
                artifactId project.name
                version '0.3.1'

                from components.java

                // create the sign pom artifact
                pom.withXml {
                    def pomFile = file("${project.buildDir}/generated-pom.xml")
                    writeTo(pomFile)
                    def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                    artifact(pomAscFile) {
                        classifier = null
                        extension = 'pom.asc'
                    }
                }

                artifact(sourceJar) {
                    classifier = 'sources'
                }
                artifact(javadocJar) {
                    classifier = 'javadoc'
                }

                // create the signed artifacts
                project.tasks.signArchives.signatureFiles.each {
                    artifact(it) {
                        def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                        if (matcher.find()) {
                            classifier = matcher.group(1)
                        } else {
                            classifier = null
                        }
                        extension = 'jar.asc'
                    }
                }
            }
        }
        repositories {
            maven {
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                credentials {
                    username ossrhUsername
                    password ossrhPassword
                }
            }
        }
    }

    model {
        tasks.generatePomFileForMavenJavaPublication {
            destination = file("$buildDir/generated-pom.xml")
        }
        tasks.publishMavenJavaPublicationToMavenLocal {
            dependsOn project.tasks.signArchives
        }
        tasks.publishMavenJavaPublicationToMavenRepository {
            dependsOn project.tasks.signArchives
        }
    }
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description 'Small library allowing to efficiently assemble entities from querying/merging external datasources or aggregating microservices'
            name project.name
            url 'https://github.com/pellse/assembler'
            organization {
                name 'io.github.pellse'
                url 'https://github.com/pellse'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/pellse/assembler/issues'
            }
            licenses {
                license {
                    name 'The Apache License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            scm {
                connection 'scm:git@github.com:pellse/assembler.git'
                developerConnection 'scm:git@github.com:pellse/assembler.git'
                url 'scm:git@github.com:pellse/assembler.git'
            }
            developers {
                developer {
                    id 'pellse'
                    name 'Sebastien Pelletier'
                }
            }
        }
    }
}
